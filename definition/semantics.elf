
% --------------------------------------------------
val : tm -> type.

val/true : val tm/true.

val/false : val tm/false.

val/zero : val tm/zero.

val/succ : val (tm/succ V)
    <- val V.

val/pair   : val (tm/pair V1 V2)
    <- val V2
    <- val V1.

val/inl    : val (tm/inl V)
    <- val V.

val/inr    : val (tm/inr V)
    <- val V.

val/lam    : val (tm/lam E).

val/ptr    : {l} val (tm/ptr l).

val/alloc  : val tm/alloc.

val/stable : val (tm/stable V)
    <- val V.

val/into   : val (tm/into V)
    <- val V.

val/cons   : val (tm/cons V1 V2)
    <- val V2
    <- val V1.

% --------------------------------------------------
store : type. %name store Sigma.

store/empty : store.
store/now   : store -> nat -> val V -> store.
store/later : store -> nat -> tm -> store.
store/null  : store -> nat -> store.

store-lookup-now : store -> nat -> val V -> type.
%mode store-lookup-now +Sigma +L -V.

% --------------------------------------------------
store-conc : store -> store -> store -> type.
%mode store-conc +Sigma +Sigma' -Sigma''.

store-conc/empty : store-conc Sigma store/empty Sigma.

store-conc/now : store-conc Sigma (store/now Sigma' L V)
                            (store/now Sigma'' L V)
    <- store-conc Sigma Sigma' Sigma''.

store-conc/later : store-conc Sigma (store/later Sigma' L V)
                              (store/later Sigma'' L V)
    <- store-conc Sigma Sigma' Sigma''.

store-conc/null : store-conc Sigma (store/null Sigma' L)
                             (store/null Sigma'' L)
    <- store-conc Sigma Sigma' Sigma''.

%worlds () (store-conc _ _ _).
%total (Sigma') (store-conc _ Sigma' _).

% --------------------------------------------------
store-lookup-now/hyp : store-lookup-now (store/now Sigma L V) L V.

store-lookup-now/now : store-lookup-now (store/now Sigma L' V') L V
    <- neq-nat L L'
    <- store-lookup-now Sigma L V.

store-lookup-now/later : store-lookup-now (store/later Sigma L' V') L V
    <- store-lookup-now Sigma L V.

store-lookup-now/null : store-lookup-now (store/null Sigma L') L V
    <- store-lookup-now Sigma L V.

% --------------------------------------------------
fresh : store -> nat -> type.

fresh/empty : fresh store/empty L.

fresh/now : fresh (store/now Sigma L' V) L
    <- fresh Sigma L
    <- neq-nat L L'.

fresh/later : fresh (store/later Sigma L' E) L
    <- fresh Sigma L
    <- neq-nat L L'.

fresh/null : fresh (store/null Sigma L') L
    <- fresh Sigma L
    <- neq-nat L L'.

% --------------------------------------------------
construct-fresh-loc : store -> nat -> type.
%mode construct-fresh-loc +Sigma -L.

construct-fresh-loc/empty :
    construct-fresh-loc store/empty nat/0.

construct-fresh-loc/now :
    construct-fresh-loc (store/now Sigma L _) (nat/s Max)
    <- construct-fresh-loc Sigma L'
    <- max-nat L L' Max.

construct-fresh-loc/later :
    construct-fresh-loc (store/later Sigma L _) (nat/s Max)
    <- construct-fresh-loc Sigma L'
    <- max-nat L L' Max.

construct-fresh-loc/null :
    construct-fresh-loc (store/null Sigma L) (nat/s Max)
    <- construct-fresh-loc Sigma L'
    <- max-nat L L' Max.

% --------------------------------------------------
construct-fresh-loc-sound : construct-fresh-loc Sigma L
                         -> fresh Sigma L -> type.
%mode construct-fresh-loc-sound +Construct -Fresh.

- : construct-fresh-loc-sound construct-fresh-loc/empty fresh/empty.


% --------------------------------------------------
construct-fresh : {Sigma : store} {L} fresh Sigma L -> type.
%mode construct-fresh +Sigma -L -Fresh.

% --------------------------------------------------
eval : store -> tm -> store -> val V -> type. %name eval Eval.

eval/refl : {V : val E} eval Sigma E Sigma V.

eval/if-true : eval Sigma (tm/if E E' _) Sigma'' V
    <- eval Sigma E Sigma' val/true
    <- eval Sigma' E' Sigma'' V.

eval/if-false : eval Sigma (tm/if E _ E') Sigma'' V
    <- eval Sigma E Sigma' val/false
    <- eval Sigma' E' Sigma'' V.

eval/succ : eval Sigma (tm/succ E) Sigma' (val/succ V)
    <- eval Sigma E Sigma' V.

eval/nat-rec-zero : eval Sigma (tm/nat-rec E Ez Es) Sigma'' V
    <- eval Sigma E Sigma' val/zero
    <- eval Sigma' Ez Sigma'' V.

eval/nat-rec-succ : eval Sigma (tm/nat-rec E Ez Es) Sigma'' V'
    <- eval Sigma E Sigma' (val/succ Val : val (tm/succ V))
    <- eval Sigma' (Es V) Sigma'' V'.

eval/pair : eval Sigma (tm/pair E1 E2) Sigma'' (val/pair V1 V2)
    <- eval Sigma E1 Sigma' V1
    <- eval Sigma' E2 Sigma'' V2.

eval/fst : eval Sigma (tm/fst E) Sigma' V1
    <- eval Sigma E Sigma' (val/pair V1 _).

eval/snd : eval Sigma (tm/snd E) Sigma' V2
    <- eval Sigma E Sigma' (val/pair _ V2).

eval/inl : eval Sigma (tm/inl E) Sigma' (val/inl V)
    <- eval Sigma E Sigma' V.

eval/inr : eval Sigma (tm/inr E) Sigma' (val/inr V)
    <- eval Sigma E Sigma' V.

eval/case-inl : eval Sigma (tm/case E-sum E-left E-right) Sigma'' V
    <- eval Sigma E-sum Sigma' (val/inl _ : val (tm/inl E))
    <- eval Sigma' (E-left E) Sigma'' V.

eval/case-inr : eval Sigma (tm/case E-sum E-left E-right) Sigma'' V
    <- eval Sigma E-sum Sigma' (val/inr _ : val (tm/inr E))
    <- eval Sigma' (E-right E) Sigma'' V.

eval/app : eval Sigma (tm/app E1 E2) Sigma''' V'
    <- eval Sigma E1 Sigma' (val/lam : val (tm/lam E))
    <- eval Sigma' E2 Sigma'' (_ : val V)
    <- eval Sigma'' (E V) Sigma''' V'.

eval/delta : eval Sigma (tm/delta E' E) (store/later Sigma' L E) (val/ptr L)
    <- eval Sigma E' Sigma' val/alloc
    <- fresh Sigma' L.

eval/delta-let : eval Sigma (tm/delta-let E E') Sigma'' V
    <- eval Sigma E Sigma' (val/ptr L) 
    <- eval Sigma' (E' (tm/ptr-ref L)) Sigma'' V.

eval/ptr-ref : eval Sigma (tm/ptr-ref L) Sigma V
    <- store-lookup-now Sigma L V.

eval/into : eval Sigma (tm/into E) Sigma' (val/into V)
    <- eval Sigma E Sigma' V.

eval/out : eval Sigma (tm/out E) Sigma' V
    <- eval Sigma E Sigma' (val/into V).

eval/stable : eval Sigma (tm/stable E) Sigma' (val/stable V)
    <- eval Sigma E Sigma' V.

eval/promote : eval Sigma (tm/promote E) Sigma' (val/stable V)
    <- eval Sigma E Sigma' V.

eval/stable-let : eval Sigma (tm/stable-let E E') Sigma'' V''
    <- eval Sigma E Sigma' (val/stable _ : val (tm/stable V))
    <- eval Sigma' (E' V) Sigma'' V''.

eval/cons : eval Sigma (tm/cons E E') Sigma'' (val/cons V V')
    <- eval Sigma E Sigma' V
    <- eval Sigma' E' Sigma'' V'.

eval/cons-let : eval Sigma (tm/cons-let E E') Sigma'' V
    <- eval Sigma E Sigma' (val/cons _ _ : val (tm/cons X XS))
    <- eval Sigma' (E' X XS) Sigma'' V.

eval/fix : eval Sigma (tm/fix E) Sigma' V
    <- eval Sigma (E (tm/fix E)) Sigma' V.


% --------------------------------------------------
===> : store -> store -> type. %infix none 10 ===>.

===>/empty : store/empty ===> store/empty.

===>/later : (store/later Sigma L E) ===> (store/now Sigma'' L V)
    <- Sigma ===> Sigma'
    <- eval Sigma' E Sigma'' V
    <- fresh Sigma'' L.

===>/now : (store/now Sigma L V) ===> (store/null Sigma' L)
    <- Sigma ===> Sigma'
    <- fresh Sigma' L.

===>/null : (store/null Sigma L) ===> (store/null Sigma' L)
    <- Sigma ===> Sigma'
    <- fresh Sigma' L.

