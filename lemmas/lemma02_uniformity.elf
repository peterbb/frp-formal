%% ----------------------------------------------------------------
uniformity' : {Eval : eval store/empty E store/empty V}
             extension Eval Conc ->
             {Sigma} eval Sigma E Sigma V -> type.
%mode uniformity' +Eval1 +Extension +Sigma -Eval2.
    
- : uniformity' (eval/refl _) _ _ (eval/refl _).

- : uniformity' (eval/if-true EvalBranch EvalBool) 
               (extension/if-true _ ExtBranch ExtBool)
               Sigma
               (eval/if-true EvalBranch' EvalBool')
    <- uniformity' EvalBool ExtBool Sigma EvalBool'
    <- uniformity' EvalBranch ExtBranch Sigma EvalBranch'.

- : uniformity' (eval/if-false EvalBranch EvalBool) 
               (extension/if-false _ ExtBranch ExtBool)
               Sigma
               (eval/if-false EvalBranch' EvalBool')
    <- uniformity' EvalBool ExtBool Sigma EvalBool'
    <- uniformity' EvalBranch ExtBranch Sigma EvalBranch'.

- : uniformity' (eval/succ Eval) (extension/succ Ext) Sigma
               (eval/succ Eval')
    <- uniformity' Eval Ext Sigma Eval'.

- : uniformity' (eval/nat-rec-zero EvalBranch EvalNum)
               (extension/nat-rec-zero _ ExtBranch ExtNum)
               Sigma
               (eval/nat-rec-zero EvalBranch' EvalNum')
    <- uniformity' EvalNum ExtNum Sigma EvalNum'
    <- uniformity' EvalBranch ExtBranch Sigma EvalBranch'.

- : uniformity' (eval/nat-rec-succ EvalBranch EvalNum)
               (extension/nat-rec-succ _ ExtBranch ExtNum)
               Sigma
               (eval/nat-rec-succ EvalBranch' EvalNum')
    <- uniformity' EvalNum ExtNum Sigma EvalNum'
    <- uniformity' EvalBranch ExtBranch Sigma EvalBranch'.

- : uniformity' (eval/pair EvalSnd EvalFst)
               (extension/pair _ ExtSnd ExtFst)
               Sigma
               (eval/pair EvalSnd' EvalFst')
    <- uniformity' EvalFst ExtFst Sigma EvalFst'
    <- uniformity' EvalSnd ExtSnd Sigma EvalSnd'.


- : uniformity' (eval/snd Eval) (extension/snd Ext) Sigma (eval/snd Eval')
    <- uniformity' Eval Ext Sigma Eval'.

- : uniformity' (eval/fst Eval) (extension/fst Ext) Sigma (eval/fst Eval')
    <- uniformity' Eval Ext Sigma Eval'.

- : uniformity' (eval/inl Eval) (extension/inl Ext) Sigma (eval/inl Eval')
    <- uniformity' Eval Ext Sigma Eval'.

- : uniformity' (eval/inr Eval) (extension/inr Ext) Sigma (eval/inr Eval')
    <- uniformity' Eval Ext Sigma Eval'.

- : uniformity' (eval/case-inl EvalBranch EvalSum)
               (extension/case-inl _ ExtBranch ExtSum)
               Sigma
               (eval/case-inl EvalBranch' EvalSum')
    <- uniformity' EvalSum ExtSum Sigma EvalSum'
    <- uniformity' EvalBranch ExtBranch Sigma EvalBranch'.

- : uniformity' (eval/case-inr EvalBranch EvalSum)
               (extension/case-inr _ ExtBranch ExtSum)
               Sigma
               (eval/case-inr EvalBranch' EvalSum')
    <- uniformity' EvalSum ExtSum Sigma EvalSum'
    <- uniformity' EvalBranch ExtBranch Sigma EvalBranch'.

- : uniformity' (eval/app EvalRes EvalArg EvalFun)
               (extension/app _ ExtRes ExtArg ExtFun) Sigma
               (eval/app EvalRes' EvalArg' EvalFun')
    <- uniformity' EvalFun ExtFun Sigma EvalFun'
    <- uniformity' EvalArg ExtArg Sigma EvalArg'
    <- uniformity' EvalRes ExtRes Sigma EvalRes'.
               
- : uniformity' (eval/delta-let EvalBody EvalDelta)
               (extension/delta-let _ ExtBody ExtDelta)
               Sigma
               (eval/delta-let EvalBody' EvalDelta')
    <- uniformity' EvalDelta ExtDelta Sigma EvalDelta'
    <- uniformity' EvalBody ExtBody Sigma EvalBody'.

- : uniformity' (eval/into Eval) (extension/into Ext) Sigma (eval/into Eval')
    <- uniformity' Eval Ext Sigma Eval'.

- : uniformity' (eval/out Eval) (extension/out Ext) Sigma (eval/out Eval')
    <- uniformity' Eval Ext Sigma Eval'.

- : uniformity' (eval/stable Eval) (extension/stable Ext) Sigma 
               (eval/stable Eval')
    <- uniformity' Eval Ext Sigma Eval'.

- : uniformity' (eval/promote Eval) (extension/promote Ext) Sigma 
               (eval/promote Eval')
    <- uniformity' Eval Ext Sigma Eval'.

- : uniformity' (eval/stable-let EvalBody EvalStable)
               (extension/stable-let _ ExtBody ExtStable)
               Sigma
               (eval/stable-let EvalBody' EvalStable')
    <- uniformity' EvalStable ExtStable Sigma EvalStable'
    <- uniformity' EvalBody ExtBody Sigma EvalBody'.

- : uniformity' (eval/cons EvalSnd EvalFst)
               (extension/cons _ ExtSnd ExtFst)
               Sigma
               (eval/cons EvalSnd' EvalFst')
    <- uniformity' EvalFst ExtFst Sigma EvalFst'
    <- uniformity' EvalSnd ExtSnd Sigma EvalSnd'.

- : uniformity' (eval/cons-let EvalBody EvalCons)
               (extension/cons-let _ ExtBody ExtCons)
               Sigma
               (eval/cons-let EvalBody' EvalCons')
    <- uniformity' EvalCons ExtCons Sigma EvalCons'
    <- uniformity' EvalBody ExtBody Sigma EvalBody'.

- : uniformity' (eval/fix Eval) (extension/fix Ext) Sigma (eval/fix Eval')
    <- uniformity' Eval Ext Sigma Eval'.

%worlds () (uniformity' _ _ _ _).
%total Eval (uniformity' Eval _ _ _).


%% ----------------------------------------------------
uniformity : eval store/empty E store/empty V ->
              {Sigma} eval Sigma E Sigma V -> type.
%mode uniformity +Eval1 +Sigma -Eval2.

- : uniformity Eval Sigma Eval'
    <- extension-effective Eval Extension
    <- uniformity' Eval Extension Sigma Eval'.

%worlds () (uniformity _ _ _).
%total {} (uniformity _ _ _).
